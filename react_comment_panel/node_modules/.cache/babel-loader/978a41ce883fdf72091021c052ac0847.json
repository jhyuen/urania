{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\vladi\\\\eclipse-workspace\\\\comment_panel_2\\\\comments-panel\\\\src\\\\components\\\\Comments.js\";\nimport React, { Component } from 'react';\nimport Comment from './Comment';\nimport PropTypes from 'prop-types';\n\nclass Comments extends Component {\n  render() {\n    return this.props.comments.map(comment =>\n    /*#__PURE__*/\n    // the key allows react to rerender only the comments which were changed\n    _jsxDEV(Comment, {\n      comment: comment,\n      delComment: this.props.delComment\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 4\n    }, this));\n  }\n\n} // PropTypes\n\n\nComments.propTypes = {\n  comments: PropTypes.array.isRequired,\n  delComment: PropTypes.func.isRequired\n};\nexport default Comments; // TODO: should store a snippet ID","map":{"version":3,"sources":["C:/Users/vladi/eclipse-workspace/comment_panel_2/comments-panel/src/components/Comments.js"],"names":["React","Component","Comment","PropTypes","Comments","render","props","comments","map","comment","delComment","id","propTypes","array","isRequired","func"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAChCI,EAAAA,MAAM,GAAG;AACR,WAAO,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,GAApB,CAAyBC,OAAD;AAAA;AAC9B;AACA,YAAC,OAAD;AAA0B,MAAA,OAAO,EAAEA,OAAnC;AAA4C,MAAA,UAAU,EAAG,KAAKH,KAAL,CAAWI;AAApE,OAAcD,OAAO,CAACE,EAAtB;AAAA;AAAA;AAAA;AAAA,YAFM,CAAP;AAIA;;AAN+B,C,CASjC;;;AACAP,QAAQ,CAACQ,SAAT,GAAqB;AACpBL,EAAAA,QAAQ,EAAIJ,SAAS,CAACU,KAAV,CAAgBC,UADR;AAEpBJ,EAAAA,UAAU,EAAIP,SAAS,CAACY,IAAV,CAAeD;AAFT,CAArB;AAKA,eAAeV,QAAf,C,CAEA","sourcesContent":["import React, { Component } from 'react';\r\nimport Comment from './Comment';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Comments extends Component {\r\n\trender() {\r\n\t\treturn this.props.comments.map((comment) => (\r\n\t\t\t// the key allows react to rerender only the comments which were changed\r\n\t\t\t<Comment key={comment.id} comment={comment} delComment={ this.props.delComment }/>\r\n\t\t));\r\n\t}\r\n}\r\n\r\n// PropTypes\r\nComments.propTypes = {\r\n\tcomments \t: PropTypes.array.isRequired,\r\n\tdelComment \t: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Comments;\r\n\r\n// TODO: should store a snippet ID"]},"metadata":{},"sourceType":"module"}