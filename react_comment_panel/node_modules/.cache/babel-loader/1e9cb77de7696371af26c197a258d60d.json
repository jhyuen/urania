{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\vladi\\\\eclipse-workspace\\\\comment_panel_2\\\\comments-panel\\\\src\\\\App.js\";\nimport React, { Component, useEffect } from 'react';\nimport Header from './components/layout/Header';\nimport Comments from './components/Comments';\nimport AddComment from './components/AddComment';\nimport './App.css'; // uuidv4 generates random ids \n\nconst {\n  v4: uuidv4\n} = require('uuid'); // local storage key\n\n\nconst LOCAL_STORAGE_KEY = 'SnippetApp.comments'; // for DEBUG only, while the backend is not set\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      comments: []\n    };\n    this.useEffect = (() => {\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.state.comments));\n    }, [this.state.comments]);\n    this.useEffect = (() => {\n      const storedComments = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (storedComments) this.setState({\n        comments: [...this.state.comments, storedComments]\n      });\n    }, []);\n\n    this.delComment = id => {\n      this.setState({\n        comments: [...this.state.comments.filter(comment => comment.id !== id)]\n      });\n    };\n\n    this.addComment = text => {\n      const newComment = {\n        id: uuidv4(),\n        // generate a random unique id\n        timestamp: Date.now(),\n        // grab the current time\n        text,\n        startLine: 0,\n        startCharIndex: 0,\n        endLine: 0,\n        endCharIndex: 0,\n        delete: false\n      };\n      this.setState({\n        comments: [...this.state.comments, newComment]\n      }); //console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(this.timestamp));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Container\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Comments, {\n          comments: this.state.comments,\n          delComment: this.delComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AddComment, {\n          addComment: this.addComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/vladi/eclipse-workspace/comment_panel_2/comments-panel/src/App.js"],"names":["React","Component","useEffect","Header","Comments","AddComment","v4","uuidv4","require","LOCAL_STORAGE_KEY","App","state","comments","localStorage","setItem","JSON","stringify","storedComments","parse","getItem","setState","delComment","id","filter","comment","addComment","text","newComment","timestamp","Date","now","startLine","startCharIndex","endLine","endCharIndex","delete","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP,C,CAEA;;AACA,MAAM;AAAEC,EAAAA,EAAE,EAAEC;AAAN,IAAiBC,OAAO,CAAC,MAAD,CAA9B,C,CAEA;;;AACA,MAAMC,iBAAiB,GAAG,qBAA1B,C,CAAkD;;AAElD,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC3BU,KAD2B,GACnB;AACPC,MAAAA,QAAQ,EAAC;AADF,KADmB;AAAA,SAM3BV,SAN2B,IAMb,MAAM;AAACW,MAAAA,YAAY,CAACC,OAAb,CAAqBL,iBAArB,EAAwCM,IAAI,CAACC,SAAL,CAAe,KAAKL,KAAL,CAAWC,QAA1B,CAAxC;AAA6E,KAArF,EACV,CAAC,KAAKD,KAAL,CAAWC,QAAZ,CAPwB;AAAA,SAW3BV,SAX2B,IAWb,MAAM;AACjB,YAAMe,cAAc,GAAGF,IAAI,CAACG,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqBV,iBAArB,CAAX,CAAvB;AACA,UAAIQ,cAAJ,EAAoB,KAAKG,QAAL,CAAc;AAAER,QAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,QAAf,EAAyBK,cAAzB;AAAZ,OAAd;AACnB,KAHS,EAIV,EAfwB;;AAAA,SAkB3BI,UAlB2B,GAkBbC,EAAD,IAAQ;AACpB,WAAKF,QAAL,CAAc;AAAER,QAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoBW,MAApB,CAA2BC,OAAO,IAAIA,OAAO,CAACF,EAAR,KAAeA,EAArD,CAAJ;AAAZ,OAAd;AACA,KApB0B;;AAAA,SAuB3BG,UAvB2B,GAuBbC,IAAD,IAAU;AACtB,YAAMC,UAAU,GAAG;AACjBL,QAAAA,EAAE,EAAEf,MAAM,EADO;AACA;AACjBqB,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAFM;AAEO;AACxBJ,QAAAA,IAHiB;AAIjBK,QAAAA,SAAS,EAAE,CAJM;AAKjBC,QAAAA,cAAc,EAAE,CALC;AAMjBC,QAAAA,OAAO,EAAE,CANQ;AAOjBC,QAAAA,YAAY,EAAE,CAPG;AAQjBC,QAAAA,MAAM,EAAE;AARS,OAAnB;AAUA,WAAKf,QAAL,CAAc;AAAER,QAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,QAAf,EAAyBe,UAAzB;AAAZ,OAAd,EAXsB,CAYtB;AACA,KApC0B;AAAA;;AAsC3BS,EAAAA,MAAM,GAAG;AACR,wBACC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACC;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,QAAC,QAAD;AAAU,UAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWC,QAA/B;AAAyC,UAAA,UAAU,EAAG,KAAKS;AAA3D;AAAA;AAAA;AAAA;AAAA,gBAFD,eAGC,QAAC,UAAD;AAAY,UAAA,UAAU,EAAG,KAAKI;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AASA;;AAhD0B;;AAmD5B,eAAef,GAAf","sourcesContent":["import React, { Component, useEffect } from 'react';\nimport Header from './components/layout/Header'\nimport Comments from './components/Comments'\nimport AddComment from './components/AddComment'\nimport './App.css';\n\n// uuidv4 generates random ids \nconst { v4: uuidv4 } = require('uuid');\t\n\n// local storage key\nconst LOCAL_STORAGE_KEY = 'SnippetApp.comments'\t\t\t// for DEBUG only, while the backend is not set\n\nclass App extends Component {\n\tstate = {\n\t\tcomments:[]\n\t}\n\t\n\t// storing to the local storage\n\tuseEffect = ((() => {localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.state.comments))}),\n\t\t\t\t[this.state.comments])\t// array of dependencies\n\t\n\t\n\t// get from local storage (for DEBUG only, while the backend is not set)\n\tuseEffect = ((() => {\n\t\t\t\tconst storedComments = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n\t\t\t\tif (storedComments) this.setState({ comments: [...this.state.comments, storedComments] })\n\t\t\t\t}),\n\t\t\t\t[]) // empty array never changes, so it will be called once and never recalled\n\t\n\t// delete comment\n\tdelComment = (id) => {\n\t\tthis.setState({ comments: [...this.state.comments.filter(comment => comment.id !== id)] });\n\t}\n\t\n\t// add comment\n\taddComment = (text) => {\n\t\tconst newComment = {\t\n\t\t\t\tid: uuidv4(),\t\t\t\t// generate a random unique id\n\t\t\t\ttimestamp: Date.now(),\t\t// grab the current time\n\t\t\t\ttext,\n\t\t\t\tstartLine: 0,\n\t\t\t\tstartCharIndex: 0,\n\t\t\t\tendLine: 0,\n\t\t\t\tendCharIndex: 0,\n\t\t\t\tdelete: false\n\t\t}\n\t\tthis.setState({ comments: [...this.state.comments, newComment] });\n\t\t//console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(this.timestamp));\n\t} \n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"Container\">\n\t\t\t\t\t<Header />\n\t\t\t\t\t<Comments comments={this.state.comments} delComment={ this.delComment }/>\n\t\t\t\t\t<AddComment addComment={ this.addComment } />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}